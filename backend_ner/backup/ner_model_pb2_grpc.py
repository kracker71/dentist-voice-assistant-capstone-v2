# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import utils.ner_model_pb2 as ner__model__pb2


class NERBackendStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamingNER = channel.stream_stream(
                '/ner_backend.NERBackend/StreamingNER',
                request_serializer=ner__model__pb2.NERRequest.SerializeToString,
                response_deserializer=ner__model__pb2.NERResponse.FromString,
                )
        self.UndoMissing = channel.unary_unary(
                '/ner_backend.NERBackend/UndoMissing',
                request_serializer=ner__model__pb2.Zee.SerializeToString,
                response_deserializer=ner__model__pb2.Empty.FromString,
                )
        self.AddMissing = channel.unary_unary(
                '/ner_backend.NERBackend/AddMissing',
                request_serializer=ner__model__pb2.Zee.SerializeToString,
                response_deserializer=ner__model__pb2.Empty.FromString,
                )


class NERBackendServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamingNER(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UndoMissing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMissing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NERBackendServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamingNER': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingNER,
                    request_deserializer=ner__model__pb2.NERRequest.FromString,
                    response_serializer=ner__model__pb2.NERResponse.SerializeToString,
            ),
            'UndoMissing': grpc.unary_unary_rpc_method_handler(
                    servicer.UndoMissing,
                    request_deserializer=ner__model__pb2.Zee.FromString,
                    response_serializer=ner__model__pb2.Empty.SerializeToString,
            ),
            'AddMissing': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMissing,
                    request_deserializer=ner__model__pb2.Zee.FromString,
                    response_serializer=ner__model__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ner_backend.NERBackend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NERBackend(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamingNER(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/ner_backend.NERBackend/StreamingNER',
            ner__model__pb2.NERRequest.SerializeToString,
            ner__model__pb2.NERResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UndoMissing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ner_backend.NERBackend/UndoMissing',
            ner__model__pb2.Zee.SerializeToString,
            ner__model__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMissing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ner_backend.NERBackend/AddMissing',
            ner__model__pb2.Zee.SerializeToString,
            ner__model__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
