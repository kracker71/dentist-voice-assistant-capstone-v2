// source: proto/ner_model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ner_backend.BridgeZee', null, global);
goog.exportSymbol('proto.ner_backend.CommandData', null, global);
goog.exportSymbol('proto.ner_backend.CommandUndo', null, global);
goog.exportSymbol('proto.ner_backend.Empty', null, global);
goog.exportSymbol('proto.ner_backend.NERRequest', null, global);
goog.exportSymbol('proto.ner_backend.NERResponse', null, global);
goog.exportSymbol('proto.ner_backend.SemanticCommand', null, global);
goog.exportSymbol('proto.ner_backend.TranscriptionResult', null, global);
goog.exportSymbol('proto.ner_backend.WordInfo', null, global);
goog.exportSymbol('proto.ner_backend.Zee', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.SemanticCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ner_backend.SemanticCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.SemanticCommand.displayName = 'proto.ner_backend.SemanticCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.CommandData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ner_backend.CommandData.repeatedFields_, null);
};
goog.inherits(proto.ner_backend.CommandData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.CommandData.displayName = 'proto.ner_backend.CommandData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.BridgeZee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ner_backend.BridgeZee.repeatedFields_, null);
};
goog.inherits(proto.ner_backend.BridgeZee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.BridgeZee.displayName = 'proto.ner_backend.BridgeZee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.CommandUndo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ner_backend.CommandUndo.repeatedFields_, null);
};
goog.inherits(proto.ner_backend.CommandUndo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.CommandUndo.displayName = 'proto.ner_backend.CommandUndo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.Zee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ner_backend.Zee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.Zee.displayName = 'proto.ner_backend.Zee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.NERResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ner_backend.NERResponse.repeatedFields_, null);
};
goog.inherits(proto.ner_backend.NERResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.NERResponse.displayName = 'proto.ner_backend.NERResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.TranscriptionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ner_backend.TranscriptionResult.repeatedFields_, null);
};
goog.inherits(proto.ner_backend.TranscriptionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.TranscriptionResult.displayName = 'proto.ner_backend.TranscriptionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.WordInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ner_backend.WordInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.WordInfo.displayName = 'proto.ner_backend.WordInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.NERRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ner_backend.NERRequest.repeatedFields_, null);
};
goog.inherits(proto.ner_backend.NERRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.NERRequest.displayName = 'proto.ner_backend.NERRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ner_backend.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ner_backend.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ner_backend.Empty.displayName = 'proto.ner_backend.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.SemanticCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.SemanticCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.SemanticCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.SemanticCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && proto.ner_backend.CommandData.toObject(includeInstance, f),
    undo: (f = msg.getUndo()) && proto.ner_backend.CommandUndo.toObject(includeInstance, f),
    isComplete: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.SemanticCommand}
 */
proto.ner_backend.SemanticCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.SemanticCommand;
  return proto.ner_backend.SemanticCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.SemanticCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.SemanticCommand}
 */
proto.ner_backend.SemanticCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.ner_backend.CommandData;
      reader.readMessage(value,proto.ner_backend.CommandData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.ner_backend.CommandUndo;
      reader.readMessage(value,proto.ner_backend.CommandUndo.deserializeBinaryFromReader);
      msg.setUndo(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsComplete(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.SemanticCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.SemanticCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.SemanticCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.SemanticCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ner_backend.CommandData.serializeBinaryToWriter
    );
  }
  f = message.getUndo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ner_backend.CommandUndo.serializeBinaryToWriter
    );
  }
  f = message.getIsComplete();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.ner_backend.SemanticCommand.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.SemanticCommand} returns this
 */
proto.ner_backend.SemanticCommand.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CommandData data = 2;
 * @return {?proto.ner_backend.CommandData}
 */
proto.ner_backend.SemanticCommand.prototype.getData = function() {
  return /** @type{?proto.ner_backend.CommandData} */ (
    jspb.Message.getWrapperField(this, proto.ner_backend.CommandData, 2));
};


/**
 * @param {?proto.ner_backend.CommandData|undefined} value
 * @return {!proto.ner_backend.SemanticCommand} returns this
*/
proto.ner_backend.SemanticCommand.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ner_backend.SemanticCommand} returns this
 */
proto.ner_backend.SemanticCommand.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ner_backend.SemanticCommand.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommandUndo undo = 3;
 * @return {?proto.ner_backend.CommandUndo}
 */
proto.ner_backend.SemanticCommand.prototype.getUndo = function() {
  return /** @type{?proto.ner_backend.CommandUndo} */ (
    jspb.Message.getWrapperField(this, proto.ner_backend.CommandUndo, 3));
};


/**
 * @param {?proto.ner_backend.CommandUndo|undefined} value
 * @return {!proto.ner_backend.SemanticCommand} returns this
*/
proto.ner_backend.SemanticCommand.prototype.setUndo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ner_backend.SemanticCommand} returns this
 */
proto.ner_backend.SemanticCommand.prototype.clearUndo = function() {
  return this.setUndo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ner_backend.SemanticCommand.prototype.hasUndo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool is_complete = 4;
 * @return {boolean}
 */
proto.ner_backend.SemanticCommand.prototype.getIsComplete = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ner_backend.SemanticCommand} returns this
 */
proto.ner_backend.SemanticCommand.prototype.setIsComplete = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ner_backend.CommandData.repeatedFields_ = [6,7,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.CommandData.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.CommandData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.CommandData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.CommandData.toObject = function(includeInstance, msg) {
  var f, obj = {
    zee: (f = msg.getZee()) && proto.ner_backend.Zee.toObject(includeInstance, f),
    toothSide: jspb.Message.getFieldWithDefault(msg, 2, ""),
    position: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isNumberPd: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    payload: jspb.Message.getFieldWithDefault(msg, 5, 0),
    missingList: jspb.Message.toObjectList(msg.getMissingList(),
    proto.ner_backend.Zee.toObject, includeInstance),
    bopPayloadList: (f = jspb.Message.getRepeatedBooleanField(msg, 7)) == null ? undefined : f,
    crownList: jspb.Message.toObjectList(msg.getCrownList(),
    proto.ner_backend.Zee.toObject, includeInstance),
    implantList: jspb.Message.toObjectList(msg.getImplantList(),
    proto.ner_backend.Zee.toObject, includeInstance),
    bridgeList: jspb.Message.toObjectList(msg.getBridgeList(),
    proto.ner_backend.BridgeZee.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.CommandData}
 */
proto.ner_backend.CommandData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.CommandData;
  return proto.ner_backend.CommandData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.CommandData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.CommandData}
 */
proto.ner_backend.CommandData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.setZee(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToothSide(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNumberPd(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayload(value);
      break;
    case 6:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.addMissing(value);
      break;
    case 7:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBopPayload(values[i]);
      }
      break;
    case 8:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.addCrown(value);
      break;
    case 9:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.addImplant(value);
      break;
    case 10:
      var value = new proto.ner_backend.BridgeZee;
      reader.readMessage(value,proto.ner_backend.BridgeZee.deserializeBinaryFromReader);
      msg.addBridge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.CommandData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.CommandData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.CommandData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.CommandData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
  f = message.getToothSide();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsNumberPd();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPayload();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMissingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
  f = message.getBopPayloadList();
  if (f.length > 0) {
    writer.writePackedBool(
      7,
      f
    );
  }
  f = message.getCrownList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
  f = message.getImplantList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
  f = message.getBridgeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ner_backend.BridgeZee.serializeBinaryToWriter
    );
  }
};


/**
 * optional Zee zee = 1;
 * @return {?proto.ner_backend.Zee}
 */
proto.ner_backend.CommandData.prototype.getZee = function() {
  return /** @type{?proto.ner_backend.Zee} */ (
    jspb.Message.getWrapperField(this, proto.ner_backend.Zee, 1));
};


/**
 * @param {?proto.ner_backend.Zee|undefined} value
 * @return {!proto.ner_backend.CommandData} returns this
*/
proto.ner_backend.CommandData.prototype.setZee = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.clearZee = function() {
  return this.setZee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ner_backend.CommandData.prototype.hasZee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string tooth_side = 2;
 * @return {string}
 */
proto.ner_backend.CommandData.prototype.getToothSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.setToothSide = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string position = 3;
 * @return {string}
 */
proto.ner_backend.CommandData.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_number_PD = 4;
 * @return {boolean}
 */
proto.ner_backend.CommandData.prototype.getIsNumberPd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.setIsNumberPd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 payload = 5;
 * @return {number}
 */
proto.ner_backend.CommandData.prototype.getPayload = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.setPayload = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Zee missing = 6;
 * @return {!Array<!proto.ner_backend.Zee>}
 */
proto.ner_backend.CommandData.prototype.getMissingList = function() {
  return /** @type{!Array<!proto.ner_backend.Zee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.Zee, 6));
};


/**
 * @param {!Array<!proto.ner_backend.Zee>} value
 * @return {!proto.ner_backend.CommandData} returns this
*/
proto.ner_backend.CommandData.prototype.setMissingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ner_backend.Zee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.Zee}
 */
proto.ner_backend.CommandData.prototype.addMissing = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ner_backend.Zee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.clearMissingList = function() {
  return this.setMissingList([]);
};


/**
 * repeated bool BOP_payload = 7;
 * @return {!Array<boolean>}
 */
proto.ner_backend.CommandData.prototype.getBopPayloadList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 7));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.setBopPayloadList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.addBopPayload = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.clearBopPayloadList = function() {
  return this.setBopPayloadList([]);
};


/**
 * repeated Zee crown = 8;
 * @return {!Array<!proto.ner_backend.Zee>}
 */
proto.ner_backend.CommandData.prototype.getCrownList = function() {
  return /** @type{!Array<!proto.ner_backend.Zee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.Zee, 8));
};


/**
 * @param {!Array<!proto.ner_backend.Zee>} value
 * @return {!proto.ner_backend.CommandData} returns this
*/
proto.ner_backend.CommandData.prototype.setCrownList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ner_backend.Zee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.Zee}
 */
proto.ner_backend.CommandData.prototype.addCrown = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ner_backend.Zee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.clearCrownList = function() {
  return this.setCrownList([]);
};


/**
 * repeated Zee implant = 9;
 * @return {!Array<!proto.ner_backend.Zee>}
 */
proto.ner_backend.CommandData.prototype.getImplantList = function() {
  return /** @type{!Array<!proto.ner_backend.Zee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.Zee, 9));
};


/**
 * @param {!Array<!proto.ner_backend.Zee>} value
 * @return {!proto.ner_backend.CommandData} returns this
*/
proto.ner_backend.CommandData.prototype.setImplantList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ner_backend.Zee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.Zee}
 */
proto.ner_backend.CommandData.prototype.addImplant = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ner_backend.Zee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.clearImplantList = function() {
  return this.setImplantList([]);
};


/**
 * repeated BridgeZee bridge = 10;
 * @return {!Array<!proto.ner_backend.BridgeZee>}
 */
proto.ner_backend.CommandData.prototype.getBridgeList = function() {
  return /** @type{!Array<!proto.ner_backend.BridgeZee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.BridgeZee, 10));
};


/**
 * @param {!Array<!proto.ner_backend.BridgeZee>} value
 * @return {!proto.ner_backend.CommandData} returns this
*/
proto.ner_backend.CommandData.prototype.setBridgeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ner_backend.BridgeZee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.BridgeZee}
 */
proto.ner_backend.CommandData.prototype.addBridge = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ner_backend.BridgeZee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.CommandData} returns this
 */
proto.ner_backend.CommandData.prototype.clearBridgeList = function() {
  return this.setBridgeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ner_backend.BridgeZee.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.BridgeZee.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.BridgeZee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.BridgeZee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.BridgeZee.toObject = function(includeInstance, msg) {
  var f, obj = {
    zeeList: jspb.Message.toObjectList(msg.getZeeList(),
    proto.ner_backend.Zee.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.BridgeZee}
 */
proto.ner_backend.BridgeZee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.BridgeZee;
  return proto.ner_backend.BridgeZee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.BridgeZee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.BridgeZee}
 */
proto.ner_backend.BridgeZee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.addZee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.BridgeZee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.BridgeZee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.BridgeZee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.BridgeZee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZeeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Zee zee = 1;
 * @return {!Array<!proto.ner_backend.Zee>}
 */
proto.ner_backend.BridgeZee.prototype.getZeeList = function() {
  return /** @type{!Array<!proto.ner_backend.Zee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.Zee, 1));
};


/**
 * @param {!Array<!proto.ner_backend.Zee>} value
 * @return {!proto.ner_backend.BridgeZee} returns this
*/
proto.ner_backend.BridgeZee.prototype.setZeeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ner_backend.Zee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.Zee}
 */
proto.ner_backend.BridgeZee.prototype.addZee = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ner_backend.Zee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.BridgeZee} returns this
 */
proto.ner_backend.BridgeZee.prototype.clearZeeList = function() {
  return this.setZeeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ner_backend.CommandUndo.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.CommandUndo.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.CommandUndo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.CommandUndo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.CommandUndo.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, ""),
    zee: (f = msg.getZee()) && proto.ner_backend.Zee.toObject(includeInstance, f),
    toothSide: jspb.Message.getFieldWithDefault(msg, 3, ""),
    position: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isNumberPd: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    bridge: (f = msg.getBridge()) && proto.ner_backend.BridgeZee.toObject(includeInstance, f),
    recentPayloadList: (f = jspb.Message.getRepeatedBooleanField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.CommandUndo}
 */
proto.ner_backend.CommandUndo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.CommandUndo;
  return proto.ner_backend.CommandUndo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.CommandUndo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.CommandUndo}
 */
proto.ner_backend.CommandUndo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.setZee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToothSide(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNumberPd(value);
      break;
    case 6:
      var value = new proto.ner_backend.BridgeZee;
      reader.readMessage(value,proto.ner_backend.BridgeZee.deserializeBinaryFromReader);
      msg.setBridge(value);
      break;
    case 7:
      var values = /** @type {!Array<boolean>} */ (reader.isDelimited() ? reader.readPackedBool() : [reader.readBool()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRecentPayload(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.CommandUndo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.CommandUndo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.CommandUndo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.CommandUndo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getZee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
  f = message.getToothSide();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIsNumberPd();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getBridge();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ner_backend.BridgeZee.serializeBinaryToWriter
    );
  }
  f = message.getRecentPayloadList();
  if (f.length > 0) {
    writer.writePackedBool(
      7,
      f
    );
  }
};


/**
 * optional string command = 1;
 * @return {string}
 */
proto.ner_backend.CommandUndo.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Zee zee = 2;
 * @return {?proto.ner_backend.Zee}
 */
proto.ner_backend.CommandUndo.prototype.getZee = function() {
  return /** @type{?proto.ner_backend.Zee} */ (
    jspb.Message.getWrapperField(this, proto.ner_backend.Zee, 2));
};


/**
 * @param {?proto.ner_backend.Zee|undefined} value
 * @return {!proto.ner_backend.CommandUndo} returns this
*/
proto.ner_backend.CommandUndo.prototype.setZee = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.clearZee = function() {
  return this.setZee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ner_backend.CommandUndo.prototype.hasZee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string tooth_side = 3;
 * @return {string}
 */
proto.ner_backend.CommandUndo.prototype.getToothSide = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.setToothSide = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string position = 4;
 * @return {string}
 */
proto.ner_backend.CommandUndo.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool is_number_PD = 5;
 * @return {boolean}
 */
proto.ner_backend.CommandUndo.prototype.getIsNumberPd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.setIsNumberPd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional BridgeZee bridge = 6;
 * @return {?proto.ner_backend.BridgeZee}
 */
proto.ner_backend.CommandUndo.prototype.getBridge = function() {
  return /** @type{?proto.ner_backend.BridgeZee} */ (
    jspb.Message.getWrapperField(this, proto.ner_backend.BridgeZee, 6));
};


/**
 * @param {?proto.ner_backend.BridgeZee|undefined} value
 * @return {!proto.ner_backend.CommandUndo} returns this
*/
proto.ner_backend.CommandUndo.prototype.setBridge = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.clearBridge = function() {
  return this.setBridge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ner_backend.CommandUndo.prototype.hasBridge = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated bool recent_payload = 7;
 * @return {!Array<boolean>}
 */
proto.ner_backend.CommandUndo.prototype.getRecentPayloadList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 7));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.setRecentPayloadList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.addRecentPayload = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.CommandUndo} returns this
 */
proto.ner_backend.CommandUndo.prototype.clearRecentPayloadList = function() {
  return this.setRecentPayloadList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.Zee.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.Zee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.Zee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.Zee.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstZee: jspb.Message.getFieldWithDefault(msg, 1, 0),
    secondZee: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.Zee}
 */
proto.ner_backend.Zee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.Zee;
  return proto.ner_backend.Zee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.Zee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.Zee}
 */
proto.ner_backend.Zee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFirstZee(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondZee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.Zee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.Zee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.Zee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.Zee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstZee();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSecondZee();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 first_zee = 1;
 * @return {number}
 */
proto.ner_backend.Zee.prototype.getFirstZee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.Zee} returns this
 */
proto.ner_backend.Zee.prototype.setFirstZee = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 second_zee = 2;
 * @return {number}
 */
proto.ner_backend.Zee.prototype.getSecondZee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.Zee} returns this
 */
proto.ner_backend.Zee.prototype.setSecondZee = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ner_backend.NERResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.NERResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.NERResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.NERResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.NERResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseList: jspb.Message.toObjectList(msg.getResponseList(),
    proto.ner_backend.SemanticCommand.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.NERResponse}
 */
proto.ner_backend.NERResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.NERResponse;
  return proto.ner_backend.NERResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.NERResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.NERResponse}
 */
proto.ner_backend.NERResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ner_backend.SemanticCommand;
      reader.readMessage(value,proto.ner_backend.SemanticCommand.deserializeBinaryFromReader);
      msg.addResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.NERResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.NERResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.NERResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.NERResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ner_backend.SemanticCommand.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SemanticCommand response = 1;
 * @return {!Array<!proto.ner_backend.SemanticCommand>}
 */
proto.ner_backend.NERResponse.prototype.getResponseList = function() {
  return /** @type{!Array<!proto.ner_backend.SemanticCommand>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.SemanticCommand, 1));
};


/**
 * @param {!Array<!proto.ner_backend.SemanticCommand>} value
 * @return {!proto.ner_backend.NERResponse} returns this
*/
proto.ner_backend.NERResponse.prototype.setResponseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ner_backend.SemanticCommand=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.SemanticCommand}
 */
proto.ner_backend.NERResponse.prototype.addResponse = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ner_backend.SemanticCommand, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.NERResponse} returns this
 */
proto.ner_backend.NERResponse.prototype.clearResponseList = function() {
  return this.setResponseList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ner_backend.TranscriptionResult.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.TranscriptionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.TranscriptionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.TranscriptionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.TranscriptionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcript: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    speakingRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    wordTimestampsList: jspb.Message.toObjectList(msg.getWordTimestampsList(),
    proto.ner_backend.WordInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.TranscriptionResult}
 */
proto.ner_backend.TranscriptionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.TranscriptionResult;
  return proto.ner_backend.TranscriptionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.TranscriptionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.TranscriptionResult}
 */
proto.ner_backend.TranscriptionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscript(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeakingRate(value);
      break;
    case 5:
      var value = new proto.ner_backend.WordInfo;
      reader.readMessage(value,proto.ner_backend.WordInfo.deserializeBinaryFromReader);
      msg.addWordTimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.TranscriptionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.TranscriptionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.TranscriptionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.TranscriptionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSpeakingRate();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getWordTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ner_backend.WordInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transcript = 1;
 * @return {string}
 */
proto.ner_backend.TranscriptionResult.prototype.getTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.TranscriptionResult} returns this
 */
proto.ner_backend.TranscriptionResult.prototype.setTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float start_time = 2;
 * @return {number}
 */
proto.ner_backend.TranscriptionResult.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.TranscriptionResult} returns this
 */
proto.ner_backend.TranscriptionResult.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float end_time = 3;
 * @return {number}
 */
proto.ner_backend.TranscriptionResult.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.TranscriptionResult} returns this
 */
proto.ner_backend.TranscriptionResult.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float speaking_rate = 4;
 * @return {number}
 */
proto.ner_backend.TranscriptionResult.prototype.getSpeakingRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.TranscriptionResult} returns this
 */
proto.ner_backend.TranscriptionResult.prototype.setSpeakingRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated WordInfo word_timestamps = 5;
 * @return {!Array<!proto.ner_backend.WordInfo>}
 */
proto.ner_backend.TranscriptionResult.prototype.getWordTimestampsList = function() {
  return /** @type{!Array<!proto.ner_backend.WordInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.WordInfo, 5));
};


/**
 * @param {!Array<!proto.ner_backend.WordInfo>} value
 * @return {!proto.ner_backend.TranscriptionResult} returns this
*/
proto.ner_backend.TranscriptionResult.prototype.setWordTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ner_backend.WordInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.WordInfo}
 */
proto.ner_backend.TranscriptionResult.prototype.addWordTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ner_backend.WordInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.TranscriptionResult} returns this
 */
proto.ner_backend.TranscriptionResult.prototype.clearWordTimestampsList = function() {
  return this.setWordTimestampsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.WordInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.WordInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.WordInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.WordInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.WordInfo}
 */
proto.ner_backend.WordInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.WordInfo;
  return proto.ner_backend.WordInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.WordInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.WordInfo}
 */
proto.ner_backend.WordInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.WordInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.WordInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.WordInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.WordInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.ner_backend.WordInfo.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.WordInfo} returns this
 */
proto.ner_backend.WordInfo.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float start_time = 2;
 * @return {number}
 */
proto.ner_backend.WordInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.WordInfo} returns this
 */
proto.ner_backend.WordInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float end_time = 3;
 * @return {number}
 */
proto.ner_backend.WordInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.WordInfo} returns this
 */
proto.ner_backend.WordInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float confidence = 4;
 * @return {number}
 */
proto.ner_backend.WordInfo.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.WordInfo} returns this
 */
proto.ner_backend.WordInfo.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ner_backend.NERRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.NERRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.NERRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.NERRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.NERRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.ner_backend.TranscriptionResult.toObject, includeInstance),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    addMissing: (f = msg.getAddMissing()) && proto.ner_backend.Zee.toObject(includeInstance, f),
    undoMissing: (f = msg.getUndoMissing()) && proto.ner_backend.Zee.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 5, ""),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.NERRequest}
 */
proto.ner_backend.NERRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.NERRequest;
  return proto.ner_backend.NERRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.NERRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.NERRequest}
 */
proto.ner_backend.NERRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ner_backend.TranscriptionResult;
      reader.readMessage(value,proto.ner_backend.TranscriptionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    case 3:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.setAddMissing(value);
      break;
    case 4:
      var value = new proto.ner_backend.Zee;
      reader.readMessage(value,proto.ner_backend.Zee.deserializeBinaryFromReader);
      msg.setUndoMissing(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.NERRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.NERRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.NERRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.NERRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ner_backend.TranscriptionResult.serializeBinaryToWriter
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getAddMissing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
  f = message.getUndoMissing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ner_backend.Zee.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * repeated TranscriptionResult results = 1;
 * @return {!Array<!proto.ner_backend.TranscriptionResult>}
 */
proto.ner_backend.NERRequest.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.ner_backend.TranscriptionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ner_backend.TranscriptionResult, 1));
};


/**
 * @param {!Array<!proto.ner_backend.TranscriptionResult>} value
 * @return {!proto.ner_backend.NERRequest} returns this
*/
proto.ner_backend.NERRequest.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ner_backend.TranscriptionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ner_backend.TranscriptionResult}
 */
proto.ner_backend.NERRequest.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ner_backend.TranscriptionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ner_backend.NERRequest} returns this
 */
proto.ner_backend.NERRequest.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional bool is_final = 2;
 * @return {boolean}
 */
proto.ner_backend.NERRequest.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ner_backend.NERRequest} returns this
 */
proto.ner_backend.NERRequest.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Zee add_missing = 3;
 * @return {?proto.ner_backend.Zee}
 */
proto.ner_backend.NERRequest.prototype.getAddMissing = function() {
  return /** @type{?proto.ner_backend.Zee} */ (
    jspb.Message.getWrapperField(this, proto.ner_backend.Zee, 3));
};


/**
 * @param {?proto.ner_backend.Zee|undefined} value
 * @return {!proto.ner_backend.NERRequest} returns this
*/
proto.ner_backend.NERRequest.prototype.setAddMissing = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ner_backend.NERRequest} returns this
 */
proto.ner_backend.NERRequest.prototype.clearAddMissing = function() {
  return this.setAddMissing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ner_backend.NERRequest.prototype.hasAddMissing = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Zee undo_missing = 4;
 * @return {?proto.ner_backend.Zee}
 */
proto.ner_backend.NERRequest.prototype.getUndoMissing = function() {
  return /** @type{?proto.ner_backend.Zee} */ (
    jspb.Message.getWrapperField(this, proto.ner_backend.Zee, 4));
};


/**
 * @param {?proto.ner_backend.Zee|undefined} value
 * @return {!proto.ner_backend.NERRequest} returns this
*/
proto.ner_backend.NERRequest.prototype.setUndoMissing = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ner_backend.NERRequest} returns this
 */
proto.ner_backend.NERRequest.prototype.clearUndoMissing = function() {
  return this.setUndoMissing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ner_backend.NERRequest.prototype.hasUndoMissing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.ner_backend.NERRequest.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ner_backend.NERRequest} returns this
 */
proto.ner_backend.NERRequest.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional float duration = 7;
 * @return {number}
 */
proto.ner_backend.NERRequest.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ner_backend.NERRequest} returns this
 */
proto.ner_backend.NERRequest.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ner_backend.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.ner_backend.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ner_backend.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ner_backend.Empty}
 */
proto.ner_backend.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ner_backend.Empty;
  return proto.ner_backend.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ner_backend.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ner_backend.Empty}
 */
proto.ner_backend.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ner_backend.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ner_backend.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ner_backend.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ner_backend.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.ner_backend);
