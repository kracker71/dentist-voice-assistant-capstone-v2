// source: speech2text.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var audio_pb = require('./audio_pb.js');
goog.object.extend(proto, audio_pb);
var decoder_type_pb = require('./decoder_type_pb.js');
goog.object.extend(proto, decoder_type_pb);
goog.exportSymbol('proto.gowajee.speech.speech2text.StreamingTranscribeConfig', null, global);
goog.exportSymbol('proto.gowajee.speech.speech2text.StreamingTranscribeRequest', null, global);
goog.exportSymbol('proto.gowajee.speech.speech2text.StreamingTranscribeResponse', null, global);
goog.exportSymbol('proto.gowajee.speech.speech2text.TranscribeConfig', null, global);
goog.exportSymbol('proto.gowajee.speech.speech2text.TranscribeRequest', null, global);
goog.exportSymbol('proto.gowajee.speech.speech2text.TranscribeResponse', null, global);
goog.exportSymbol('proto.gowajee.speech.speech2text.TranscriptionResult', null, global);
goog.exportSymbol('proto.gowajee.speech.speech2text.WordInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.TranscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gowajee.speech.speech2text.TranscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.TranscribeRequest.displayName = 'proto.gowajee.speech.speech2text.TranscribeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gowajee.speech.speech2text.StreamingTranscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.StreamingTranscribeRequest.displayName = 'proto.gowajee.speech.speech2text.StreamingTranscribeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.TranscribeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gowajee.speech.speech2text.TranscribeConfig.repeatedFields_, null);
};
goog.inherits(proto.gowajee.speech.speech2text.TranscribeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.TranscribeConfig.displayName = 'proto.gowajee.speech.speech2text.TranscribeConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gowajee.speech.speech2text.StreamingTranscribeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.StreamingTranscribeConfig.displayName = 'proto.gowajee.speech.speech2text.StreamingTranscribeConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.TranscribeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gowajee.speech.speech2text.TranscribeResponse.repeatedFields_, null);
};
goog.inherits(proto.gowajee.speech.speech2text.TranscribeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.TranscribeResponse.displayName = 'proto.gowajee.speech.speech2text.TranscribeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.TranscriptionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gowajee.speech.speech2text.TranscriptionResult.repeatedFields_, null);
};
goog.inherits(proto.gowajee.speech.speech2text.TranscriptionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.TranscriptionResult.displayName = 'proto.gowajee.speech.speech2text.TranscriptionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.WordInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gowajee.speech.speech2text.WordInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.WordInfo.displayName = 'proto.gowajee.speech.speech2text.WordInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gowajee.speech.speech2text.StreamingTranscribeResponse.repeatedFields_, null);
};
goog.inherits(proto.gowajee.speech.speech2text.StreamingTranscribeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gowajee.speech.speech2text.StreamingTranscribeResponse.displayName = 'proto.gowajee.speech.speech2text.StreamingTranscribeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.TranscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.TranscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.gowajee.speech.speech2text.TranscribeConfig.toObject(includeInstance, f),
    audioData: msg.getAudioData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.TranscribeRequest}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.TranscribeRequest;
  return proto.gowajee.speech.speech2text.TranscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.TranscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.TranscribeRequest}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gowajee.speech.speech2text.TranscribeConfig;
      reader.readMessage(value,proto.gowajee.speech.speech2text.TranscribeConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.TranscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.TranscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gowajee.speech.speech2text.TranscribeConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudioData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional TranscribeConfig config = 1;
 * @return {?proto.gowajee.speech.speech2text.TranscribeConfig}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.getConfig = function() {
  return /** @type{?proto.gowajee.speech.speech2text.TranscribeConfig} */ (
    jspb.Message.getWrapperField(this, proto.gowajee.speech.speech2text.TranscribeConfig, 1));
};


/**
 * @param {?proto.gowajee.speech.speech2text.TranscribeConfig|undefined} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeRequest} returns this
*/
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gowajee.speech.speech2text.TranscribeRequest} returns this
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audio_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.getAudioData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audio_data = 2;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeRequest} returns this
 */
proto.gowajee.speech.speech2text.TranscribeRequest.prototype.setAudioData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.StreamingTranscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamingConfig: (f = msg.getStreamingConfig()) && proto.gowajee.speech.speech2text.StreamingTranscribeConfig.toObject(includeInstance, f),
    audioData: msg.getAudioData_asB64(),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.StreamingTranscribeRequest;
  return proto.gowajee.speech.speech2text.StreamingTranscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gowajee.speech.speech2text.StreamingTranscribeConfig;
      reader.readMessage(value,proto.gowajee.speech.speech2text.StreamingTranscribeConfig.deserializeBinaryFromReader);
      msg.setStreamingConfig(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudioData(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.StreamingTranscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStreamingConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gowajee.speech.speech2text.StreamingTranscribeConfig.serializeBinaryToWriter
    );
  }
  f = message.getAudioData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional StreamingTranscribeConfig streaming_config = 1;
 * @return {?proto.gowajee.speech.speech2text.StreamingTranscribeConfig}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.getStreamingConfig = function() {
  return /** @type{?proto.gowajee.speech.speech2text.StreamingTranscribeConfig} */ (
    jspb.Message.getWrapperField(this, proto.gowajee.speech.speech2text.StreamingTranscribeConfig, 1));
};


/**
 * @param {?proto.gowajee.speech.speech2text.StreamingTranscribeConfig|undefined} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest} returns this
*/
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.setStreamingConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.clearStreamingConfig = function() {
  return this.setStreamingConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.hasStreamingConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes audio_data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.getAudioData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes audio_data = 2;
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {string}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.getAudioData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudioData()));
};


/**
 * optional bytes audio_data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudioData()`
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.getAudioData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudioData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.setAudioData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool is_final = 3;
 * @return {boolean}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeRequest} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeRequest.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gowajee.speech.speech2text.TranscribeConfig.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.TranscribeConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.TranscribeConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscribeConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    decoderType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    getWordTimestamps: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    getSpeakingRate: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    wordListList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.TranscribeConfig;
  return proto.gowajee.speech.speech2text.TranscribeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.TranscribeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguageCode(value);
      break;
    case 4:
      var value = /** @type {!proto.gowajee.speech.DecoderType} */ (reader.readEnum());
      msg.setDecoderType(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGetWordTimestamps(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGetSpeakingRate(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.addWordList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.TranscribeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.TranscribeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscribeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguageCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDecoderType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getGetWordTimestamps();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getGetSpeakingRate();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getWordListList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      12,
      f
    );
  }
};


/**
 * optional string language_code = 3;
 * @return {string}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.getLanguageCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.setLanguageCode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional gowajee.speech.DecoderType decoder_type = 4;
 * @return {!proto.gowajee.speech.DecoderType}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.getDecoderType = function() {
  return /** @type {!proto.gowajee.speech.DecoderType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.gowajee.speech.DecoderType} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.setDecoderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool get_word_timestamps = 8;
 * @return {boolean}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.getGetWordTimestamps = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.setGetWordTimestamps = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool get_speaking_rate = 9;
 * @return {boolean}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.getGetSpeakingRate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.setGetSpeakingRate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * repeated string word_list = 12;
 * @return {!Array<string>}
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.getWordListList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.setWordListList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.addWordList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gowajee.speech.speech2text.TranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.TranscribeConfig.prototype.clearWordListList = function() {
  return this.setWordListList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.StreamingTranscribeConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcribeConfig: (f = msg.getTranscribeConfig()) && proto.gowajee.speech.speech2text.TranscribeConfig.toObject(includeInstance, f),
    encoding: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sampleRate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numChannels: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.StreamingTranscribeConfig;
  return proto.gowajee.speech.speech2text.StreamingTranscribeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gowajee.speech.speech2text.TranscribeConfig;
      reader.readMessage(value,proto.gowajee.speech.speech2text.TranscribeConfig.deserializeBinaryFromReader);
      msg.setTranscribeConfig(value);
      break;
    case 2:
      var value = /** @type {!proto.gowajee.speech.AudioEncoding} */ (reader.readEnum());
      msg.setEncoding(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSampleRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.StreamingTranscribeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscribeConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gowajee.speech.speech2text.TranscribeConfig.serializeBinaryToWriter
    );
  }
  f = message.getEncoding();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSampleRate();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getNumChannels();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional TranscribeConfig transcribe_config = 1;
 * @return {?proto.gowajee.speech.speech2text.TranscribeConfig}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.getTranscribeConfig = function() {
  return /** @type{?proto.gowajee.speech.speech2text.TranscribeConfig} */ (
    jspb.Message.getWrapperField(this, proto.gowajee.speech.speech2text.TranscribeConfig, 1));
};


/**
 * @param {?proto.gowajee.speech.speech2text.TranscribeConfig|undefined} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} returns this
*/
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.setTranscribeConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.clearTranscribeConfig = function() {
  return this.setTranscribeConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.hasTranscribeConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional gowajee.speech.AudioEncoding encoding = 2;
 * @return {!proto.gowajee.speech.AudioEncoding}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.getEncoding = function() {
  return /** @type {!proto.gowajee.speech.AudioEncoding} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gowajee.speech.AudioEncoding} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.setEncoding = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 sample_rate = 3;
 * @return {number}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.getSampleRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.setSampleRate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 num_channels = 4;
 * @return {number}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.getNumChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeConfig} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeConfig.prototype.setNumChannels = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gowajee.speech.speech2text.TranscribeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.TranscribeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.TranscribeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscribeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.gowajee.speech.speech2text.TranscriptionResult.toObject, includeInstance),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.TranscribeResponse}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.TranscribeResponse;
  return proto.gowajee.speech.speech2text.TranscribeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.TranscribeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.TranscribeResponse}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gowajee.speech.speech2text.TranscriptionResult;
      reader.readMessage(value,proto.gowajee.speech.speech2text.TranscriptionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.TranscribeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.TranscribeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscribeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gowajee.speech.speech2text.TranscriptionResult.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * repeated TranscriptionResult results = 1;
 * @return {!Array<!proto.gowajee.speech.speech2text.TranscriptionResult>}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.gowajee.speech.speech2text.TranscriptionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gowajee.speech.speech2text.TranscriptionResult, 1));
};


/**
 * @param {!Array<!proto.gowajee.speech.speech2text.TranscriptionResult>} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeResponse} returns this
*/
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gowajee.speech.speech2text.TranscriptionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gowajee.speech.speech2text.TranscriptionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gowajee.speech.speech2text.TranscribeResponse} returns this
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeResponse} returns this
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float duration = 3;
 * @return {number}
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.TranscribeResponse} returns this
 */
proto.gowajee.speech.speech2text.TranscribeResponse.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gowajee.speech.speech2text.TranscriptionResult.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.TranscriptionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.TranscriptionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscriptionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    transcript: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    speakingRate: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    wordTimestampsList: jspb.Message.toObjectList(msg.getWordTimestampsList(),
    proto.gowajee.speech.speech2text.WordInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.TranscriptionResult;
  return proto.gowajee.speech.speech2text.TranscriptionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.TranscriptionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscript(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeakingRate(value);
      break;
    case 5:
      var value = new proto.gowajee.speech.speech2text.WordInfo;
      reader.readMessage(value,proto.gowajee.speech.speech2text.WordInfo.deserializeBinaryFromReader);
      msg.addWordTimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.TranscriptionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.TranscriptionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.TranscriptionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranscript();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSpeakingRate();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getWordTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.gowajee.speech.speech2text.WordInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transcript = 1;
 * @return {string}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.getTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult} returns this
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.setTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float start_time = 2;
 * @return {number}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult} returns this
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float end_time = 3;
 * @return {number}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult} returns this
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float speaking_rate = 4;
 * @return {number}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.getSpeakingRate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult} returns this
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.setSpeakingRate = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated WordInfo word_timestamps = 5;
 * @return {!Array<!proto.gowajee.speech.speech2text.WordInfo>}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.getWordTimestampsList = function() {
  return /** @type{!Array<!proto.gowajee.speech.speech2text.WordInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gowajee.speech.speech2text.WordInfo, 5));
};


/**
 * @param {!Array<!proto.gowajee.speech.speech2text.WordInfo>} value
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult} returns this
*/
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.setWordTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.gowajee.speech.speech2text.WordInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gowajee.speech.speech2text.WordInfo}
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.addWordTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.gowajee.speech.speech2text.WordInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult} returns this
 */
proto.gowajee.speech.speech2text.TranscriptionResult.prototype.clearWordTimestampsList = function() {
  return this.setWordTimestampsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.WordInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.WordInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.WordInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    word: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.WordInfo}
 */
proto.gowajee.speech.speech2text.WordInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.WordInfo;
  return proto.gowajee.speech.speech2text.WordInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.WordInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.WordInfo}
 */
proto.gowajee.speech.speech2text.WordInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWord(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.WordInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.WordInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.WordInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWord();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getConfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string word = 1;
 * @return {string}
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.getWord = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gowajee.speech.speech2text.WordInfo} returns this
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.setWord = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float start_time = 2;
 * @return {number}
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.WordInfo} returns this
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float end_time = 3;
 * @return {number}
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.WordInfo} returns this
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float confidence = 4;
 * @return {number}
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.WordInfo} returns this
 */
proto.gowajee.speech.speech2text.WordInfo.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gowajee.speech.speech2text.StreamingTranscribeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.gowajee.speech.speech2text.TranscriptionResult.toObject, includeInstance),
    isFinal: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    version: jspb.Message.getFieldWithDefault(msg, 4, ""),
    duration: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gowajee.speech.speech2text.StreamingTranscribeResponse;
  return proto.gowajee.speech.speech2text.StreamingTranscribeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gowajee.speech.speech2text.TranscriptionResult;
      reader.readMessage(value,proto.gowajee.speech.speech2text.TranscriptionResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFinal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gowajee.speech.speech2text.StreamingTranscribeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gowajee.speech.speech2text.TranscriptionResult.serializeBinaryToWriter
    );
  }
  f = message.getIsFinal();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * repeated TranscriptionResult results = 1;
 * @return {!Array<!proto.gowajee.speech.speech2text.TranscriptionResult>}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.gowajee.speech.speech2text.TranscriptionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gowajee.speech.speech2text.TranscriptionResult, 1));
};


/**
 * @param {!Array<!proto.gowajee.speech.speech2text.TranscriptionResult>} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} returns this
*/
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gowajee.speech.speech2text.TranscriptionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gowajee.speech.speech2text.TranscriptionResult}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gowajee.speech.speech2text.TranscriptionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};


/**
 * optional bool is_final = 2;
 * @return {boolean}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.getIsFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.setIsFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float duration = 7;
 * @return {number}
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.gowajee.speech.speech2text.StreamingTranscribeResponse} returns this
 */
proto.gowajee.speech.speech2text.StreamingTranscribeResponse.prototype.setDuration = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


goog.object.extend(exports, proto.gowajee.speech.speech2text);
